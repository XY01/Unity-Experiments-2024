// VectorFieldComputeShader.compute
#pragma kernel Update

// The number of threads per group in each dimension
#define THREAD_X 8
#define THREAD_Y 8
#define THREAD_Z 8
#define PI 3.1416

// The buffer to write the vector field to
RWStructuredBuffer<float3> VectorfieldBuffer;

// The dimensions of the vector field
uint3 GridDimensions;
float CellSize;

float DeltaTime; // Time step for diffusion
float DiffusionRate; // Rate at which the vectors diffuse
float AdvectionTimestep; // Rate at which the vectors diffuse

float3 InfluenceNormalizedPosition; // Position of the input velocity
float InfluenceRadius; // Radius of influence for the input velocity
float3 InfluenceVelocity; // Velocity of the input velocity




float3 BoundsMin;
float3 BoundsSize;


uint GetIndex(uint3 gridPos)
{
    gridPos.x = min(gridPos.x, GridDimensions.x - 1);
    gridPos.y = min(gridPos.y, GridDimensions.y - 1);
    gridPos.z = min(gridPos.z, GridDimensions.z - 1);
    return gridPos.x + gridPos.y * GridDimensions.x + gridPos.z * GridDimensions.x * GridDimensions.y;
    // 10 + 0 + 
}


void Diffuse(uint3 id, int index)
{
    // Implementing a basic diffusion step
    float3 cellPos = float3(id.x, id.y, id.z);
    float3 sumVelocity = 0;
    float neighborCount = 0;

    // Sum velocities from neighboring cells
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            for (int k = -1; k <= 1; k++)
            {
                float3 neighborPos = cellPos + float3(i, j, k);
                if (neighborPos.x >= 0 && neighborPos.x < GridDimensions.x &&
                    neighborPos.y >= 0 && neighborPos.y < GridDimensions.y &&
                    neighborPos.z >= 0 && neighborPos.z < GridDimensions.z)
                {
                    sumVelocity += VectorfieldBuffer[GetIndex(neighborPos)];
                    neighborCount += 1;
                }
            }
        }
    }
   
    // Update the velocity with the average of the neighbors
    float3 velocity = VectorfieldBuffer[index];
    VectorfieldBuffer[index] = lerp(velocity, sumVelocity / neighborCount, DiffusionRate * DeltaTime);
}

void Advect(uint3 id, int index)
{
    // For each cell in the grid, compute the advection
    // This is a simplified version, real implementation would require interpolation   
    float3 velocity = VectorfieldBuffer[index];
    float3 prevPos = id - velocity * AdvectionTimestep;
    uint backtracePosIndex = GetIndex(uint3(prevPos.x, prevPos.y, prevPos.z));
    
    VectorfieldBuffer[index] = lerp(VectorfieldBuffer[index], VectorfieldBuffer[backtracePosIndex], DeltaTime * 4);
}


[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void Update (uint3 id : SV_DispatchThreadID)
{
    // Only do the number of cells defined if the thread count is over
    if(id.x >= GridDimensions.x || id.y >= GridDimensions.y || id.z >= GridDimensions.z)
    {
        return;
    }  

    // Get single dimension index from thread id
    int index = GetIndex(id);

    // Influence from mouse input
    float3 voxelPos = BoundsMin + float3(id.x, id.y, id.z) * CellSize;
    float3 inputWorldPos = BoundsMin + InfluenceNormalizedPosition * BoundsSize;
    float dist = distance(inputWorldPos, voxelPos);
    
    if(dist < InfluenceRadius)
    {
        VectorfieldBuffer[index] += InfluenceVelocity * (1 - dist / InfluenceRadius) * DeltaTime * 6;
    }
    
    Diffuse(id, index);

    if(AdvectionTimestep > 0)
        Advect(id, index); 
}